apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nova-torch-ingress
  namespace: nova-torch
  labels:
    app: nova-torch
    component: ingress
  annotations:
    # Nginx ingress controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/grpc-backend: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/limit-connections: "50"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    
    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-Client-Id"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      
    # TLS/SSL configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - nova-torch.example.com
    - api.nova-torch.example.com
    - grpc.nova-torch.example.com
    secretName: nova-torch-tls
    
  rules:
  # Main API endpoint
  - host: api.nova-torch.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nova-torch-orchestrator
            port:
              number: 50051
              
  # gRPC endpoint
  - host: grpc.nova-torch.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nova-torch-orchestrator
            port:
              number: 50051
              
  # Web interface (if deployed)
  - host: nova-torch.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nova-torch-web
            port:
              number: 80
              
---
# Monitoring ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nova-torch-monitoring-ingress
  namespace: nova-torch
  labels:
    app: nova-torch
    component: monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
    # Basic auth for monitoring endpoints
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Nova-Torch Monitoring'
    
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - prometheus.nova-torch.example.com
    - grafana.nova-torch.example.com
    secretName: nova-torch-monitoring-tls
    
  rules:
  # Prometheus
  - host: prometheus.nova-torch.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
              
  # Grafana
  - host: grafana.nova-torch.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
              
---
# Basic auth secret for monitoring
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-auth
  namespace: nova-torch
type: Opaque
data:
  # Generate with: htpasswd -c auth admin
  # Default: admin/admin (REPLACE IN PRODUCTION)
  auth: YWRtaW46JGFwcjEkWmR1cS5JMUwkVzlGWUlHUkVoMFpQSVhTQ2l3Umw3Lg==
  
---
# Certificate issuer for Let's Encrypt
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@nova-torch.example.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
          
---
# Internal service mesh ingress (optional, for Istio/Linkerd)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nova-torch-internal-ingress
  namespace: nova-torch
  labels:
    app: nova-torch
    component: internal
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/grpc-backend: "true"
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    
spec:
  ingressClassName: nginx-internal
  rules:
  # Internal orchestrator endpoint
  - host: orchestrator.nova-torch.svc.cluster.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nova-torch-orchestrator
            port:
              number: 50051
              
  # Internal metrics endpoint
  - host: metrics.nova-torch.svc.cluster.local
    http:
      paths:
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: nova-torch-orchestrator
            port:
              number: 8000
              
---
# Health check ingress for external monitoring
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nova-torch-health-ingress
  namespace: nova-torch
  labels:
    app: nova-torch
    component: health
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /health
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # No auth for health checks
    
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - health.nova-torch.example.com
    secretName: nova-torch-health-tls
    
  rules:
  - host: health.nova-torch.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nova-torch-orchestrator
            port:
              number: 8001