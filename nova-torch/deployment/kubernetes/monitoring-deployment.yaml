apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: nova-torch
  labels:
    app: prometheus
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: monitoring
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
    spec:
      serviceAccountName: prometheus
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
        
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/usr/share/prometheus/console_libraries'
        - '--web.console.templates=/usr/share/prometheus/consoles'
        - '--storage.tsdb.retention.time=30d'
        - '--storage.tsdb.retention.size=50GB'
        - '--web.enable-lifecycle'
        
        ports:
        - name: web
          containerPort: 9090
          protocol: TCP
          
        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
            
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
          
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-pvc
          
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: nova-torch
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: standard
  
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: nova-torch
  labels:
    app: prometheus
    component: monitoring
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 9090
    targetPort: web
  selector:
    app: prometheus
    component: monitoring
    
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: nova-torch
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'nova-torch'
        environment: 'production'
    
    scrape_configs:
    # Nova-Torch Orchestrator
    - job_name: 'nova-torch-orchestrator'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - nova-torch
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app, __meta_kubernetes_pod_label_component]
        action: keep
        regex: nova-torch;orchestrator
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
    
    # Nova-Torch Agents
    - job_name: 'nova-torch-agents'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - nova-torch
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app, __meta_kubernetes_pod_label_component]
        action: keep
        regex: nova-torch;agent
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
    
    # DragonflyDB
    - job_name: 'dragonfly'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - nova-torch
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app]
        action: keep
        regex: dragonfly
      - source_labels: [__address__]
        action: replace
        regex: ([^:]+)(?::\d+)?
        replacement: $1:9999
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
    
    # Kubernetes metrics
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
    
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
    
    - job_name: 'kubernetes-cadvisor'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - source_labels: [__address__]
        regex: (.+):(.+)
        replacement: ${1}:4194
        target_label: __address__
        
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: nova-torch
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      component: monitoring
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
        
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - name: web
          containerPort: 3000
          protocol: TCP
          
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-clock-panel"
          
        resources:
          requests:
            cpu: "0.5"
            memory: "512Mi"
          limits:
            cpu: "1"
            memory: "1Gi"
            
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboard-files
          mountPath: /var/lib/grafana/dashboards
          
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-dashboard-files
        configMap:
          name: grafana-dashboard-files
          
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: nova-torch
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
  
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: nova-torch
  labels:
    app: grafana
    component: monitoring
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 3000
    targetPort: web
  selector:
    app: grafana
    component: monitoring
    
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secrets
  namespace: nova-torch
type: Opaque
stringData:
  admin-password: "REPLACE_WITH_SECURE_PASSWORD"
  
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: nova-torch
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: false
      
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: nova-torch
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'Nova-Torch'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards
        
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-files
  namespace: nova-torch
data:
  nova-torch-overview.json: |
    {
      "dashboard": {
        "id": null,
        "uid": "nova-torch-overview",
        "title": "Nova-Torch Overview",
        "tags": ["nova-torch", "overview"],
        "timezone": "browser",
        "schemaVersion": 30,
        "version": 0,
        "refresh": "10s",
        "panels": [
          {
            "id": 1,
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0},
            "type": "graph",
            "title": "Active Agents",
            "targets": [
              {
                "expr": "nova_torch_agents_active",
                "refId": "A"
              }
            ]
          },
          {
            "id": 2,
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0},
            "type": "graph",
            "title": "Task Queue Size",
            "targets": [
              {
                "expr": "nova_torch_tasks_queued",
                "refId": "A"
              }
            ]
          },
          {
            "id": 3,
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8},
            "type": "graph",
            "title": "Message Rate",
            "targets": [
              {
                "expr": "rate(nova_torch_messages_total[5m])",
                "refId": "A"
              }
            ]
          },
          {
            "id": 4,
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8},
            "type": "graph",
            "title": "System Health",
            "targets": [
              {
                "expr": "nova_torch_system_health_status",
                "refId": "A"
              }
            ]
          }
        ]
      }
    }